#!/bin/sh -e
# usage:
#- vpcs sys installer            - finds the installer bin
#  vpcs sys installer command    - returns the install command
#  vpcs sys installer add  <...> - installs packages
#  vpcs sys installer rediscover - forcibly rediscovers
# note different packages may have different installers, so we should maintain a list

Intent="find"
[[ -z "$1" ]] && Intent="find"
[[ "$1" = "command" ]] && Intent="command"
[[ "$1" = "add" ]] && Intent="install"
[[ "$1" = "rediscover" ]] && Intent="rediscover"


PkgMgr=""
PkgCmd=""

discoverPackageManager(){
  if [[ -x $(which brew) ]]; then
    PkgMgr="brew"
    PkgCmd="brew install"
    return 0
  elif [[ -x $(which apk) ]]; then
      PkgMgr="apk"
      PkgCmd="apk add"
      return 0
  elif [[ -x $(which apt) ]]; then
      PkgMgr="apt"
      PkgCmd="apt install"
      return 0
  elif [[ -x $(which yum) ]]; then
      PkgMgr="yum"
      PkgCmd="yum install"
  elif [[ -x $(which dnf) ]]; then
      PkgMgr="dnf"
      PkgCmd="dnf install"
      return 0
  elif [[ -x $(which zypper) ]]; then
      PkgMgr="zypper"
      PkgCmd="zypper install"
      return 0
  elif [[ -x $(which pacman) ]]; then
      PkgMgr="pacman"
      PkgCmd="pacman -S"
      return 0
  elif [[ -x $(which emerge) ]]; then
      PkgMgr="emerge"
      PkgCmd="emerge"
      return 0
  elif [[ -x $(which pkg) ]]; then
      PkgMgr="pkg"
      PkgCmd="pkg install"
  elif [[ -x $(which xbps-install) ]]; then
      PkgMgr="xbps"
      PkgCmd="xbps-install"
      return 0
  elif [[ -x $(which swupd) ]]; then
      PkgMgr="swupd"
      PkgCmd="swupd bundle-add"
      return 0
  elif [[ -x $(which tazpkg) ]]; then
      PkgMgr="tazpkg"
      PkgCmd="tazpkg get-install"
      return 0;
  elif [[ -x $(which eopkg) ]]; then
      PkgMgr="eopkg"
      PkgCmd="eopkg install"
      return 0;
  elif [[ -x $(which spack) ]]; then
      PkgMgr="spack"
      PkgCmd="spack install"
      return 0;
  elif [[ -x $(which guix) ]]; then
      PkgMgr="guix"
      PkgCmd="guix package -i"
      return 0;
  elif [[ -x $(which nix-env) ]]; then
      PkgMgr="nix"
      PkgCmd="nix-env -i"
      return 0;
  elif [[ -x $(which flatpak) ]]; then
      PkgMgr="flatpak"
      PkgCmd="flatpak install"
      return 0;
  elif [[ -x $(which snap) ]]; then
      PkgMgr="snap"
      PkgCmd="snap install"
      return 0;
  elif [[ -x $(which rpm) ]]; then
      PkgMgr="rpm"
      PkgCmd="rpm -i"
      return 0;
  elif [[ -x $(which dpkg) ]]; then
      PkgMgr="dpkg"
      PkgCmd="dpkg -i"
      return 0;
  elif [[ -z "$PkgMgr" ]]; then
      echo "No package manager found"
      exit 1
  fi
  return 1;
}

createEnvFile(){
  discoverPackageManager
  local EnvFile="$VPCS_ROOT/usr/env/package-manager.profile"
  [[ -f $EnvFile ]] && rm $EnvFile
  touch $EnvFile
  echo "export VPCS_PackageManager=\"${PkgMgr}\"" >> $EnvFile
  echo "export VPCS_InstallCommand=\"${PkgCmd}\"" >> $EnvFile
  source $EnvFile
  return 0
}


KNOWN_INSTALLER=1
KNOWN_COMMAND=1
if [[ ! -z "$VPCS_PackageManger" ]] && [[ -x $(which $VPCS_PackageManager) ]]; then
  KNOWN_INSTALLER=0
fi

[[ ! -z "$VPCS_InstallCommand" ]] && KNOWN_COMMAND=0
if [[ "$Intent" = "rediscover" ]]; then
  create_envfile
  exit 0
fi

[[ KNOWN_INSTALLER -eq 1 ]] && createEnvFile


if [[ -z "$VPCS_PackageManager" ]]; then
  vpcs log critical "Cannot find package manager!"
  exit 1
fi
if [[ "$Intent" =~ ^command$ ]]; then
  echo "$VPCS_InstallCommand"
  exit 0
fi

if [[ "$Intent" =~ ^install$ ]]; then
  vpcs log debug "$@"
  Package="$2"
  # special use case
  [[ "$VPCS_InstallCommand" =~ apt && "$Package" =~ ^ruby$ ]] && Package="ruby-full"
  $VPCS_InstallCommand $Package
  exit 0
else
  echo "$VPCS_PackageManager"
  exit 0
fi