openapi: 3.0.3
info:
  title: RBAC service
  description: |
    RBAC service allows creating permissions and assigning those permissions to roles.
    Users can then be assigned the roles within a scope to provide access.
    
    Useful links:
    - [Guidelines for naming permissions](https://groupondev.atlassian.net/wiki/x/CoAV4RI)
  version: v2
tags:
  - name: Permissions
    description: |
      Everything about permissions
  - name: Roles
    description: |
      Everything about roles
  - name: Roles Ownership
    description: |
      Everything about roles ownership
  - name: Roles request and approval
    description: |
      Everything about roles request and approval
  - name: Categories
    description: |
      Everything about categories
  - name: Scope Types
    description: |
      Everything about Scope Types
  - name: Users
    description: |
      Everything about user roles
paths:
  /v2/permissions:
    post:
      tags:
        - "Permissions"
      description: |
        Creates a permission. The code needs to be unique and category should already exist.
        Have a meaningful name for the code as the code will be used by clients to authorize requests.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/permissions.request"
      responses:
        201:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/permissions.response"
        400:
          $ref: "#/components/responses/400"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"
    get:
      tags:
        - Permissions
      description: |
        Get all permissions. Optionally, can be filtered on categoryNames, categoryIds, 
        createdBy, createdFrom and createdTo.
      parameters:
        - name: categoryIds
          in: query
          description: Filter permissions matching all categories ID.The items are comma separated.
          required: false
          explode: false
          schema:
            type: string
            example:
              - "edb85006-0690-44be-a8e3-424da5c7510e,2959a073-3ee6-4d46-9f07-0daffb7fb827"
        - name: createdBy
          in: query
          description: Filter permissions created by the user
          required: false
          schema:
            type: string
            format: uuid
            example: "d8db4e13-570b-4b35-8249-bb25d4482bec"
        - name: createdFrom
          in: query
          description: Filter permissions created on/after the date
          required: false
          schema:
            type: string
            format: date
            example: "2023-03-15"
        - name: createdTo
          in: query
          description: Filter permissions created on/before the date
          required: false
          schema:
            type: string
            format: date
            example: "2023-03-30"
        - name: permissionCode
          in: query
          description: Filter permissions on the basis of permission code
          required: false
          schema:
            type: string
            example: "RBAC:TEST:DELETE"
        - name: page
          in: query
          description: Give information about the page number
          required: false
          schema:
            type: integer
            example: "0"
        - name: size
          in: query
          description: Give information for number of items to get in one request
          required: false
          schema:
            type: integer
            example: "0"
        - name: sort
          in: query
          description: sort the required data
          required: false
          schema:
            type: string
            example: "name,desc"
        - name: show
          in: query
          description: Filter to include deleted permissions as well.
          required: false
          schema:
            type: string
            example: "deleted"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/paginated.permissions.response"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
  /v2/permissions/{permissionId}:
    get:
      tags:
        - "Permissions"
      description: |
        Get details of a permission by id
      parameters:
        - name: permissionId
          in: path
          description: permission UUID
          required: true
          schema:
            type: string
            format: uuid
            example: "0aa2d9ee-2197-4c54-aac7-e8d0525baa5c"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/permissions.response"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

    patch:
      tags:
        - "Permissions"
      description: |
        Update an existing permission. Only updates to description and category is allowed.
        **The supplied categories will be added to the permission.**
      parameters:
        - name: permissionId
          in: path
          description: permission UUID
          required: true
          schema:
            type: string
            format: uuid
            example: "0aa2d9ee-2197-4c54-aac7-e8d0525baa5c"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/permissions.patch.request"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/permissions.response"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

    delete:
      tags:
        - "Permissions"
      description: |
        Delete a permission by id. The deleted permission will to be removed from all roles
      parameters:
        - name: permissionId
          in: path
          description: permission UUID
          required: true
          schema:
            type: string
            format: uuid
            example: "0aa2d9ee-2197-4c54-aac7-e8d0525baa5c"
      responses:
        204:
          description: Successful response
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /v2/permissions/{permissionId}/categories/{categoryId}:
    delete:
      tags:
        - "Permissions"
      description: |
        Delete a category from a permisson.
      parameters:
        - name: permissionId
          in: path
          description: permission UUID
          required: true
          schema:
            type: string
            format: uuid
            example: "0aa2d9ee-2197-4c54-aac7-e8d0525baa5c"
        - name: categoryId
          in: path
          description: Category that needs to be deleted from the permission
          required: true
          schema:
            type: string
            format: uuid
            example: "2cfe6f03-3593-4c33-8fd4-ad5d81a83908"
      responses:
        204:
          description: Successful response
        400:
          $ref: "#/components/responses/400"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"
  /v2/roles:
    post:
      tags:
        - "Roles"
      description: |
        Creates a role
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/roles.create.request"
      responses:
        201:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/roles.response"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    get:
      tags:
        - "Roles"
      description: |
        Get all roles. Optionally, can be filtered on categoryIds, permissionIds, createdBy, createdFrom and createdTo.
      parameters:
        - name: categoryIds
          in: query
          description: Filter roles having all categoryIds. The items are comma separated and is an AND filter.
          required: false
          explode: false
          schema:
            type: string
            example:
              - "edb85006-0690-44be-a8e3-424da5c7510e,2959a073-3ee6-4d46-9f07-0daffb7fb827"
        - name: createdBy
          in: query
          description: Filter roles created by the user
          required: false
          schema:
            type: string
            format: uuid
            example: "d8db4e13-570b-4b35-8249-bb25d4482bec"
        - name: createdFrom
          in: query
          description: Filter roles created on/after the supplied date
          required: false
          schema:
            type: string
            format: date
            example: "2023-03-15"
        - name: createdTo
          in: query
          description: Filter roles created on/before the supplied date
          required: false
          schema:
            type: string
            format: date
            example: "2023-03-30"
        - name: permissionIds
          in: query
          description: Filter roles having all permissionIds. The items are comma separated and is an AND filter.
          required: false
          explode: false
          schema:
            type: array
            minItems: 1
            items:
              type: string
              format: uuid
              example:
                - "73c71d9c-fbba-4a23-bf41-fa16b41cfce5"
                - "fd09a3ba-54ba-4697-9776-1a946abfc9d5"
        - name: roleName
          in: query
          description: Filter roles on the basis of name
          required: false
          schema:
            type: string
            example: "Developer"
        - name: page
          in: query
          description: Give information about the page number
          required: false
          schema:
            type: integer
            example: "0"
        - name: size
          in: query
          description: Give information for number of items to get in one request
          required: false
          schema:
            type: integer
            example: "0"
        - name: sort
          in: query
          description: sort the required data
          required: false
          schema:
            type: string
            example: "name,desc"
        - name: show
          in: query
          description: Filter to include deleted roles as well.
          required: false
          schema:
            type: string
            example: "deleted"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/paginated.roles.response"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
  /v2/roles/{roleId}:
    get:
      tags:
        - "Roles"
      description: |
        Get details of a role by id
      parameters:
        - name: roleId
          in: path
          description: role ID
          required: true
          schema:
            type: string
            format: uuid
            example: "eb54a30b-8a5e-4bd1-8701-3402aec7eb18"
        - name: show
          in: query
          description: Query param to control the categories and permissions field in the response. When show="minimal categories and permissions fields are returned as null.
          required: false
          schema:
            type: string
            example: "minimal"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/roleId.response"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

    patch:
      tags:
        - "Roles"
      description: |
        Updates an existing role. Update to description, permissions and categories are allowed.
        **Supplied permissions and categories will be added to the role.**
      parameters:
        - name: roleId
          in: path
          description: role uuid
          required: true
          schema:
            type: string
            example: "eb54a30b-8a5e-4bd1-8701-3402aec7eb18"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/roles.patch.request"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/roles.response"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

    delete:
      tags:
        - "Roles"
      description: |
        Delete a role. The deleted role will be unassigned from all users.
      parameters:
        - name: roleId
          in: path
          description: role uuid
          required: true
          schema:
            type: string
            format: uuid
            example: "eb54a30b-8a5e-4bd1-8701-3402aec7eb18"
      responses:
        204:
          description: Successful response
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /v2/roles/{roleId}/categories/{categoryId}:
    delete:
      tags:
        - "Roles"
      description: |
        Delete a category from a role.
      parameters:
        - name: roleId
          in: path
          description: role Id
          required: true
          schema:
            type: string
            format: uuid
            example: "0e8db634-6ff1-4cf4-ad1f-1f6ca197cfb5"
        - name: categoryId
          in: path
          description: Category that needs to be deleted from the role
          required: true
          schema:
            type: string
            format: uuid
            example: "1575eb37-5940-412f-ae5e-333e6c8a7f89"
      responses:
        204:
          description: Successful response
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /v2/roles/{roleId}/permissions/{permissionId}:
    delete:
      tags:
        - "Roles"
      description: |
        Delete a permission from a role.
      parameters:
        - name: roleId
          in: path
          description: role Id
          required: true
          schema:
            type: string
            format: uuid
            example: "0e8db634-6ff1-4cf4-ad1f-1f6ca197cfb5"
        - name: permissionId
          in: path
          description: Permission that needs to be deleted from the role
          required: true
          schema:
            type: string
            format: uuid
            example: "1575eb37-5940-412f-ae5e-333e6c8a7f89"
      responses:
        204:
          description: Successful response
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /v2/roles/owners:
    post:
      tags:
        - "Roles Ownership"
      description: |
        Create a owner for a role
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/roles.owners.request"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/roles.owners.response"
        400:
          $ref: "#/components/responses/400"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"
    get:
      tags:
        - "Roles Ownership"
      description: |
        Get owners for roles. Optionally, can be filtered on roleId, owners, fromDate, toDate
      parameters:
        - name: roleIds
          in: query
          description: Filter users who are owners for all the given role Ids. The items are comma separated and is an AND filter
          required: false
          explode: false
          schema:
            type: string
            example:
              - "cb94a125-f59d-4f7e-a0dc-111cc2643803,f958913c-27a7-44c4-a190-714e9d43fd29"
        - name: ownerIds
          in: query
          description: Fitler roles that has all of the listed owners. The items are comma separated and is an AND filter
          required: false
          explode: false
          schema:
            type: string
            example:
              - "fadc7287-7f52-48a2-9638-95c56d4424cf,ecc0bcf3-543f-4008-9a5b-f651225ef13a"
        - name: createdBy
          in: query
          description: User who created an owner for the role
          required: false
          schema:
            type: string
            format: uuid
            example: "d8db4e13-570b-4b35-8249-bb25d4482bec"
        - name: createdFrom
          in: query
          description: Date on/after which a user was made an owner
          required: false
          schema:
            type: string
            format: date
            example: "2023-03-15"
        - name: createdTo
          in: query
          description: Date on/before which a user was made an owner.
          required: false
          schema:
            type: string
            format: date
            example: "2023-03-30"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/roles.owners.response"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
  /v2/roles/{roleId}/owners/{ownerId}:
    get:
      tags:
        - "Roles Ownership"
      description: |
        Get details of the owner for a role
      parameters:
        - name: roleId
          in: path
          description: role Id
          required: true
          schema:
            type: string
            format: uuid
            example: "0e8db634-6ff1-4cf4-ad1f-1f6ca197cfb5"
        - name: ownerId
          in: path
          description: owner Id
          required: true
          schema:
            type: string
            format: uuid
            example: "6f78c8c3-a24a-4209-84c9-1b48f5c1fe9a"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/roles.owners.response"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    delete:
      tags:
        - "Roles Ownership"
      description: |
        Remove a user as an owner for a role
      parameters:
        - name: roleId
          in: path
          description: role Id
          required: true
          schema:
            type: string
            format: uuid
            example: "0e8db634-6ff1-4cf4-ad1f-1f6ca197cfb5"
        - name: ownerId
          in: path
          description: owner Id
          required: true
          schema:
            type: string
            format: uuid
            example: "6f78c8c3-a24a-4209-84c9-1b48f5c1fe9a"
      responses:
        204:
          description: Successful response
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /v2/roles/requests:
    post:
      tags:
        - "Roles request and approval"
      description: |
        Submit a request for access to a role for a particular scope
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user.roles.create-request.request"
      responses:
        201:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user.roles.create-request.response"
        400:
          $ref: "#/components/responses/400"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"

    get:
      tags:
        - Roles request and approval
      description: |
        Get roles requests made by users. Optionally, can be filtered roleId, roleOwnerId and status.
      parameters:
        - name: requesterId
          in: query
          description: requesterId
          explode: false
          schema:
            type: string
            format: uuid
            example: "e842a88f-ce62-4234-9ce6-86cd8a73923c"
        - name: roleId
          in: query
          description: role Id
          required: false
          schema:
            type: string
            format: uuid
            example: "d8db4e13-570b-4b35-8249-bb25d4482bec"
        - name: roleOwnerId
          in: query
          description: roleOwnerId
          required: false
          schema:
            type: string
            format: uuid
            example: "20bda1c4-7483-4566-935e-3975f33a139e"
        - name: status
          in: query
          description: status
          required: false
          schema:
            $ref: "#/components/schemas/roleRequestStatus"
        - name: page
          in: query
          description: Give information about the page number
          required: false
          schema:
            type: integer
            example: "0"
        - name: size
          in: query
          description: Give information for number of items to get in one request
          required: false
          schema:
            type: integer
            example: "0"
        - name: sort
          in: query
          description: sort the required data
          required: false
          schema:
            type: string
            example: "name,desc"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/paginated.user.role.requests.response"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
  /v2/roles/requests/{requestId}:
    put:
      tags:
        - "Roles request and approval"
      description: |
        Approve/Reject/Cancel a role request. Only allowed if the request state is pending
      parameters:
        - name: requestId
          in: path
          description: requestId
          required: true
          schema:
            type: string
            format: uuid
            example: "0940d720-bba1-433d-9416-f92e59d0921a"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - comment
                - status
              properties:
                comment:
                  type: string
                  example: "Reason why the request is approved, rejected or cancelled"
                status:
                  $ref: "#/components/schemas/roleRequestStatus"

      responses:
        201:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user.roles.create-request.response"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /v2/categories:
    post:
      tags:
        - "Categories"
      description: |
        Create a category
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/categories.create.request"
      responses:
        201:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/categories.create.response"
        400:
          $ref: "#/components/responses/400"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"

    get:
      tags:
        - Categories
      description: |
        Get all categories. Optionally, can be filtered on createdBy, from and to.
      parameters:
        - name: createdBy
          in: query
          description: Filter categories created by the user
          required: false
          schema:
            type: string
            format: uuid
            example: "d8db4e13-570b-4b35-8249-bb25d4482bec"
        - name: createdFrom
          in: query
          description: Filter categories created on/after the date
          required: false
          schema:
            type: string
            format: date
            example: "2023-03-15"
        - name: createdTo
          in: query
          description: Filter categories created on/before the date
          required: false
          schema:
            type: string
            format: date
            example: "2023-03-30"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/categories.create.response"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /v2/categories/{categoryId}:
    get:
      tags:
        - "Categories"
      description: |
        Get details of a category by id
      parameters:
        - name: categoryId
          in: path
          description: categoryId
          required: true
          schema:
            type: string
            format: uuid
            example: "b88270e4-3e34-4123-9f7a-14446e77c896"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/categories.create.response"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

    patch:
      tags:
        - "Categories"
      description: |
        Update category description
      parameters:
        - name: categoryId
          in: path
          description: categoryId
          required: true
          schema:
            type: string
            format: uuid
            example: "b88270e4-3e34-4123-9f7a-14446e77c896"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  example: "Updated description of the category"
      responses:
        201:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/categories.create.response"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    delete:
      tags:
        - "Categories"
      description: |
        Delete a category. It will be removed from all permission and roles.
      parameters:
        - name: categoryId
          in: path
          description: categoryId
          required: true
          schema:
            type: string
            format: uuid
            example: "b88270e4-3e34-4123-9f7a-14446e77c896"
      responses:
        204:
          description: Successful response
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /v2/scope_types:
    post:
      tags:
        - "Scope Types"
      description: |
        Create a scope type
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/scopeType.create.request"
      responses:
        201:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/scopeType.create.response"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

    get:
      tags:
        - "Scope Types"
      description: |
        Get scope types
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/scopeType.create.response"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
  /v2/scope_types/{scopeType}:
    get:
      tags:
        - "Scope Types"
      description: |
        Get details of a scopeType
      parameters:
        - name: scopeType
          in: path
          description: scopeType
          required: true
          schema:
            $ref: "#/components/schemas/scopeType"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/scopeType.create.response"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

    patch:
      tags:
        - "Scope Types"
      description: |
        Update the description of the scope type
      parameters:
        - name: scopeType
          in: path
          description: scope type
          required: true
          schema:
            $ref: "#/components/schemas/scopeType"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - description
              properties:
                description:
                  type: string
                  example: "Description of scope type"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/scopeType.create.response"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /v2/users/roles:
    get:
      tags:
        - "Users"
      description: |
        Get roles assigned to users.
      parameters:
        - name: userIds
          in: query
          description: Get roles that are assigned to all the supplied users. The items are comma separated and is an OR filter.
          required: false
          explode: false
          schema:
            type: array
            minItems: 1
            items:
              type: string
              format: uuid
              example: "a372ff25-9d69-4715-82ba-0619a563a681"
        - name: roleIds
          in: query
          description: Get users who have all the supplied roles assigned. The items are comma separated and is an OR filter.
          required: false
          explode: false
          schema:
            type: string
            example:
              - "cb94a125-f59d-4f7e-a0dc-111cc2643803,f958913c-27a7-44c4-a190-714e9d43fd29"
        - name: createdBy
          in: query
          description: Filter assignments that are created by specified user
          required: false
          schema:
            type: string
            format: uuid
            example: "d8db4e13-570b-4b35-8249-bb25d4482bec"
        - name: createdFrom
          in: query
          description: Filter roles that are assigned on/after the supplied date
          required: false
          schema:
            type: string
            format: date
            example: "2023-03-15"
        - name: createdTo
          in: query
          description: Filter roles that are assigned on/before the supplied date
          required: false
          schema:
            type: string
            format: date
            example: "2023-03-30"
        - name: scopeType
          in: query
          description: Get roles that are assigned for specified scopeType
          required: false
          schema:
            $ref: "#/components/schemas/scopeType"
        - name: scopeValue
          in: query
          description: Get roles that are assigned for specified scopeValue
          required: false
          schema:
            type: string
            example: "25230fc1-e7af-40ba-b2fc-dd94d7dfe9aa"
        - name: page
          in: query
          description: Give information about the page number
          required: false
          schema:
            type: integer
            example: "0"
        - name: size
          in: query
          description: Give information for number of items to get in one request
          required: false
          schema:
            type: integer
            example: "0"
        - name: sort
          in: query
          description: sort the required data
          required: false
          schema:
            type: string
            example: "name,desc"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/paginated.user.roles.response"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
  /v2/users/{userId}/roles:
    post:
      tags:
        - "Users"
      description: |
        Assigns roles to a user with scope specified in the body
      parameters:
        - name: userId
          in: path
          description: User Id who needs to be assigned roles
          required: true
          schema:
            type: string
            format: uuid
            example: "6f78c8c3-a24a-4209-84c9-1b48f5c1fe9a"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              minItems: 1
              items:
                type: object
                required:
                  - roleId
                  - scopeType
                  - scopeValue
                properties:
                  roleId:
                    type: string
                    format: uuid
                    example: "0a0c7112-0a56-4d68-ae0d-fb915bf5b59b"
                  comments:
                    type: string
                    example: "Reason for providing access"
                  scopeType:
                    $ref: "#/components/schemas/scopeType"
                  scopeValue:
                    type: string
                    example: "fa094b3b-d3f6-466e-943f-859dbfdd36e2"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user.roles.create.response"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    delete:
      tags:
        - "Users"
      description: |
        Unassign all roles assigned to a user
      parameters:
        - name: userId
          in: path
          description: UserId whose roles needs to be deleted
          required: true
          schema:
            type: string
            format: uuid
            example: "6f78c8c3-a24a-4209-84c9-1b48f5c1fe9a"
      responses:
        204:
          description: Successful response
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /v2/users/{userId}/roles/{roleId}/{scopeType}:
    delete:
      tags:
        - "Users"
      description: |
        Delete a role assigned to a user with specific scopes.
        **ScopeValue is passed in the query param.**
        Only GLOBAL scopeType do not have scopeValue assigned to it.
      parameters:
        - name: roleId
          in: path
          description: role Id
          required: true
          schema:
            type: string
            example: "0e8db634-6ff1-4cf4-ad1f-1f6ca197cfb5"
        - name: userId
          in: path
          description: UserId whose role needs to be deleted
          required: true
          schema:
            type: string
            example: "6f78c8c3-a24a-4209-84c9-1b48f5c1fe9a"
        - name: scopeType
          in: path
          description: scopeType
          required: true
          schema:
            $ref: "#/components/schemas/scopeType"
        - name: scopeValue
          in: query
          description: scopeValue. Since, global scopeTypes do not have a associated scopeValue.
          required: false
          schema:
            type: string
            example: "6f78c8c3-a24a-4209-84c9-1b48f5c1fe9a"
      responses:
        204:
          description: Successful response
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /v2/users/{userId}/permissions:
    get:
      tags:
        - "Users"
      description: |
        Get permissions assigned to the user
      parameters:
        - name: userId
          in: path
          description: UserId to get permissions for
          required: true
          schema:
            type: string
            format: uuid
            example: "6f78c8c3-a24a-4209-84c9-1b48f5c1fe9a"
        - name: scopeType
          in: query
          description: Filter permissions matching supplied scopeType
          schema:
            $ref: "#/components/schemas/scopeType"
        - name: scopeValue
          in: query
          description: Filter permissions for the scopeValue - the resource id against which permission needs to check. For MERCHANT scopeType, this should be set to merchantId. Mandatory is scopeType is not GLOBAL.
          schema:
            type: string
            example: "efa7f0ff-890e-478f-ae5d-7ce12cb96df9"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user.permissions.response"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /v2/users/{userId}/permissions/check:
    get:
      tags:
        - "Users"
      description: |
        Check if a users has specific permission for the specified resource - A combination of scopeType and scopeValue
      parameters:
        - name: userId
          in: path
          description: UserId to get permissions
          required: true
          schema:
            type: string
            example: "6f78c8c3-a24a-4209-84c9-1b48f5c1fe9a"
        - name: scopeType
          in: query
          required: true
          description: Filter permissions matching supplied scopeType
          schema:
            $ref: "#/components/schemas/scopeType"
        - name: scopeValue
          in: query
          description: The resource id against which permission needs to check. For MERCHANT scopeType, this should be set to merchantId
          schema:
            type: string
            example: "efa7f0ff-890e-478f-ae5d-7ce12cb96df9"
        - name: permission
          in: query
          required: true
          description: The permission to check
          schema:
            type: string
            example: "USER:PROFILE:CREATE"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                  - hasPermission
                properties:
                  hasPermission:
                    type: boolean
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /v2/audit:
    get:
      tags:
        - "Audit Logs"
      description: |
        Get audit logs
      parameters:
        - name: roleId
          in: query
          description: role Id
          required: false
          schema:
            type: string
            format: uuid
            example: "9bc235cd-21e1-4db7-9ede-9d6a40a3d93b"
        - name: permissionId
          in: query
          description: permission Id
          required: false
          schema:
            type: string
            format: uuid
            example: "9bc235cd-21e1-4db7-9ede-9d6a40a3d93b"
        - name: userId
          in: query
          description: User Id
          required: false
          schema:
            type: string
            format: uuid
            example: "9bc235cd-21e1-4db7-9ede-9d6a40a3d93b"
        - name: affectedUserId
          in: query
          description: Affected User Id
          required: false
          schema:
            type: string
            format: uuid
            example: "9bc235cd-21e1-4db7-9ede-9d6a40a3d93b"
        - name: createdFrom
          in: query
          description: Filter audit logs created on/after the supplied date
          required: false
          schema:
            type: string
            format: date
            example: "2023-03-15"
        - name: createdTo
          in: query
          description: Filter audit logs created on/before the supplied date
          required: false
          schema:
            type: string
            format: date
            example: "2023-03-30"
        - name: page
          in: query
          description: Give information about the page number
          required: false
          schema:
            type: integer
            example: "1"
        - name: size
          in: query
          description: Give information for number of items to get in one request
          required: false
          schema:
            type: integer
            example: "1"
        - name: type
          in: query
          description: Give information about the type of audit log history
          required: true
          schema:
            type: string
            example: "roles"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/paginated.audit.response"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
components:
  schemas:
    error.response:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          example: "error-0001"
        message:
          type: string
          example: "Description of the error"
    permissions.request:
      required:
        - code
        - description
        - categories
      type: object
      properties:
        code:
          type: string
          example: USER:PROFILE:READ
        description:
          type: string
          example: "Gives permission to read user profile"
        categories:
          type: array
          minItems: 1
          items:
            type: string
            format: uuid
          example:
            - "9bc235cd-21e1-4db7-9ede-9d6a40a3d93b"
            - "1c7467a7-1bb3-480d-9322-015680f280d4"
    permissions.patch.request:
      type: object
      properties:
        description:
          type: string
          example: "Gives permission to create voucher"
        categories:
          type: array
          items:
            type: string
            format: uuid
          example:
            - "26e25e6b-203b-4ef4-89bd-86779e4413d2"
            - "01ed06f8-e9df-4527-894f-01cd54f58d61"
    permissions.response:
      required:
        - id
        - code
        - description
        - createdAt
        - createdBy
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "2a80f305-6928-40bc-be93-e9fb39b671c4"
        code:
          type: string
          example: "USER:PROFILE:READ"
        description:
          type: string
          example: "Gives permission to read user profile"
        createdAt:
          type: string
          format: date-time
          example: "2023-03-15 13:51:21.000"
        createdBy:
          type: string
          format: uuid
          example: "24087863-cb92-4245-a7bf-c4e425cbb7ce"
        lastModifiedAt:
          type: string
          format: date-time
          example: "2023-03-15 13:51:21.000"
        lastModifiedBy:
          type: string
          format: uuid
          example: "24087863-cb92-4245-a7bf-c4e425cbb7ce"
        categories:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
                example: "d975a0f3-17de-491f-b321-dffbd6d85f56"
              name:
                type: string
                example: "Category 1"
    roles.create.request:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          example: "Merchant Admin"
        description:
          type: string
          example: "Gives access to everything for a merchant"
        permissions:
          type: array
          minItems: 1
          items:
            type: string
            format: uuid
          example:
            - "3de29e80-e68b-4bf6-acba-d2604add285e"
            - "8dc4e848-be68-4741-a316-990a139cad17"
            - "336dfaa2-4ae1-4805-bb44-7b41eef5975e"
        categories:
          type: array
          minItems: 1
          items:
            type: string
            format: uuid
          example:
            - "dc4e9a42-fa4e-4942-84b3-4d764b74da1e"
            - "8ab19e73-4f57-46d1-8428-666d3f58a278"
    roles.patch.request:
      type: object
      properties:
        description:
          type: string
          example: "Gives access to everything for a merchant"
        permissions:
          type: array
          minItems: 1
          items:
            type: string
            format: uuid
          example:
            - "b7a7f25a-8ca5-4201-88cc-406781af5062"
            - "cd1f0988-6630-459c-b6e1-b45c43449688"
            - "3b6748a9-cb9b-41bb-bab0-d486854fcb6d"
        categories:
          type: array
          minItems: 1
          items:
            type: string
          example:
            - "7a954c64-1865-494c-86ee-aa5b9c5a3866"
            - "1c320bf7-ef8d-4802-9817-539b5159f965"
    roles.response:
      type: object
      required:
        - id
        - name
        - description
        - createdAt
        - createdBy
      properties:
        id:
          type: string
          format: uuid
          example: "eb54a30b-8a5e-4bd1-8701-3402aec7eb18"
        name:
          type: string
          example: "Merchant Admin"
        description:
          type: string
          example: "Gives access to everything for a merchant"
        createdAt:
          type: string
          format: date-time
          example: "2023-03-15 13:51:21.000"
        createdBy:
          type: string
          format: uuid
          example: "24087863-cb92-4245-a7bf-c4e425cbb7ce"
        lastModifiedAt:
          type: string
          format: date-time
          example: "2023-03-15 13:51:21.000"
        lastModifiedBy:
          type: string
          format: uuid
          example: "24087863-cb92-4245-a7bf-c4e425cbb7ce"
        permissions:
          type: array
          minItems: 1
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
                example: "d975a0f3-17de-491f-b321-dffbd6d85f56"
              name:
                type: string
                example: "Permission 1"
        categories:
          type: array
          minItems: 1
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
                example: "d975a0f3-17de-491f-b321-dffbd6d85f56"
              name:
                type: string
                example: "Category 1"
    roleId.response:
      type: object
      required:
        - id
        - name
        - description
        - createdAt
        - createdBy
      properties:
        id:
          type: string
          format: uuid
          example: "eb54a30b-8a5e-4bd1-8701-3402aec7eb18"
        name:
          type: string
          example: "Merchant Admin"
        description:
          type: string
          example: "Gives access to everything for a merchant"
        createdAt:
          type: string
          format: date-time
          example: "2023-03-15 13:51:21.000"
        createdBy:
          type: string
          format: uuid
          example: "24087863-cb92-4245-a7bf-c4e425cbb7ce"
        lastModifiedAt:
          type: string
          format: date-time
          example: "2023-03-15 13:51:21.000"
        lastModifiedBy:
          type: string
          format: uuid
          example: "24087863-cb92-4245-a7bf-c4e425cbb7ce"
        permissions:
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/permissions.response"
        categories:
          type: array
          minItems: 1
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
                example: "d975a0f3-17de-491f-b321-dffbd6d85f56"
              name:
                type: string
                example: "Category 1"
    scopeType:
      type: string
      description: "Supported scope types"
    roleRequestStatus:
      type: string
      enum:
        - "PENDING"
        - "APPROVED"
        - "REJECTED"
        - "CANCELLED"
      description: "Valid role request status"
    scopeType.create.request:
      required:
        - scopeType
        - description
      type: object
      properties:
        scopeType:
          $ref: "#/components/schemas/scopeType"
        description:
          type: string
          example: "Gives access to all merchants"
    scopeType.create.response:
      required:
        - scopeType
        - description
        - createdAt
        - createdBy
      type: object
      properties:
        scopeType:
          $ref: "#/components/schemas/scopeType"
        description:
          type: string
          example: "Gives access to all merchants"
        createdAt:
          type: string
          format: date-time
          example: "2023-03-15 13:51:21.000"
        createdBy:
          type: string
          format: uuid
          example: "9032bc8c-185a-4c8e-891e-3665d0cd82fe"
        lastModifiedAt:
          type: string
          format: date-time
          example: "2023-03-15 13:51:21.000"
        lastModifiedBy:
          type: string
          format: uuid
          example: "24087863-cb92-4245-a7bf-c4e425cbb7ce"
    user.roles.create.response:
      type: object
      required:
        - userId
        - roleId
        - scopeType
        - comments
        - createdAt
        - createdBy
      properties:
        userId:
          type: string
          format: uuid
          example: "0b583421-f29d-4c01-b5de-60b6277660b5"
        roleId:
          type: string
          format: uuid
          example: "baf4e1af-fb31-445e-9505-6b45969cad30"
        scopeType:
          $ref: "#/components/schemas/scopeType"
        scopeValue:
          type: string
          example: "f23d6989-dc48-4c36-a596-c7fb6e70467c"
        comments:
          type: string
          example: "Reason for providing access"
        createdAt:
          type: string
          format: date-time
          example: "2023-03-15 13:51:21.000"
        createdBy:
          type: string
          format: uuid
          example: "9032bc8c-185a-4c8e-891e-3665d0cd82fe"
        lastModifiedAt:
          type: string
          format: date-time
          example: "2023-03-15 13:51:21.000"
        lastModifiedBy:
          type: string
          format: uuid
          example: "9032bc8c-185a-4c8e-891e-3665d0cd82fe"
    user.roles.create-request.request:
      type: object
      required:
        - roleId
        - scopeType
        - comment
      properties:
        roleId:
          type: string
          format: uuid
          example: "cc4cfe53-6f54-4066-851d-94ba87181e10"
        scopeType:
          $ref: "#/components/schemas/scopeType"
        scopeValue:
          type: string
          example: "f23d6989-dc48-4c36-a596-c7fb6e70467c"
        comment:
          type: string
          example: "Reason why you want the access"
    user.roles.create-request.response:
      type: object
      required:
        - id
        - requesterId
        - requesterComment
        - status
        - roleId
        - scopeType
        - createdAt
      properties:
        id:
          type: string
          format: uuid
          example: "43324a78-2a78-4919-a94c-cf714e007546"
        requesterId:
          type: string
          format: uuid
          example: "0b583421-f29d-4c01-b5de-60b6277660b5"
        requesterComment:
          type: string
          example: "Reason for access"
        status:
          $ref: "#/components/schemas/roleRequestStatus"
        approverId:
          type: string
          format: uuid
          example: "06b158da-f4f5-410d-bac5-b7b46c7bda4d"
        approverComment:
          type: string
          example: "Reason for rejection/approval"
        roleId:
          type: string
          format: uuid
          example: "62ddb540-6b7f-4f13-9023-dc4f2567c6fa"
        scopeType:
          $ref: "#/components/schemas/scopeType"
        scopeValue:
          type: string
          example: "f23d6989-dc48-4c36-a596-c7fb6e70467c"
        createdAt:
          type: string
          format: date-time
          example: "2023-03-15 13:51:21.000"
        lastModifiedAt:
          type: string
          format: date-time
          example: "2023-03-15 13:51:21.000"
    user.permissions.response:
      type: object
      required:
        - roleId
        - scopeType
      properties:
        roleId:
          type: string
          example: "211f225d-3593-4c3a-b92a-1e3cb80d8435"
        scopeType:
          $ref: "#/components/schemas/scopeType"
        scopeValue:
          type: string
          example: "d106446a-2b76-474c-b778-e4a1df80725e"
        permissions:
          type: array
          minItems: 1
          items:
            type: string
          example:
            - "USER:PROFILE:CREATE"
            - "USER:PROFILE:READ"
    categories.create.request:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          example: "INTERNAL"
        description:
          type: string
          example: "Explanation of category"
    categories.create.response:
      type: object
      required:
        - id
        - name
        - description
        - createdAt
        - createdBy
      properties:
        id:
          type: string
          format: uuid
          example: "1bfdc31d-76b1-4725-a97c-2351002c5b74"
        name:
          type: string
          example: "INTERNAL"
        description:
          type: string
          example: "Explanation of category"
        createdAt:
          type: string
          format: date-time
          example: "2023-03-15 13:51:21.000"
        createdBy:
          type: string
          format: uuid
          example: "06b158da-f4f5-410d-bac5-b7b46c7bda4d"
        lastModifiedAt:
          type: string
          format: date-time
          example: "2023-03-15 13:51:21.000"
        lastModifiedBy:
          type: string
          format: uuid
          example: "06b158da-f4f5-410d-bac5-b7b46c7bda4d"
    roles.owners.response:
      type: object
      required:
        - roleId
        - ownerId
        - createdAt
        - createdBy
        - comments
      properties:
        roleId:
          type: string
          format: uuid
          example: "1bfdc31d-76b1-4725-a97c-2351002c5b74"
        ownerId:
          type: string
          format: uuid
          example: "06b158da-f4f5-410d-bac5-b7b46c7bda4d"
        createdAt:
          type: string
          format: date-time
          example: "2023-03-15 13:51:21.000"
        createdBy:
          type: string
          format: uuid
          example: "06b158da-f4f5-410d-bac5-b7b46c7bda4d"
        comments:
          type: string
          example: "Description as to why the user was made an owner"
    roles.owners.request:
      type: object
      required:
        - roleId
        - ownerId
        - comments
      properties:
        roleId:
          type: string
          format: uuid
          example: "1bfdc31d-76b1-4725-a97c-2351002c5b74"
        ownerId:
          type: string
          format: uuid
          example: "06b158da-f4f5-410d-bac5-b7b46c7bda4d"
        comments:
          type: string
          example: "Description as to why the user was made an owner"
    audit.response:
      type: object
      required:
        - userId
        - action
        - objectType
        - objectName
        - timestamp
      properties:
        userId:
          type: string
          format: uuid
          example: "eb54a30b-8a5e-4bd1-8701-3402aec7eb18"
        action:
          type: string
          example: "Created"
        objectType:
          type: string
          example: "Permission"
        objectName:
          type: string
          example: "RBAC:USER:CREATE"
        affectedObject:
          type: string
          example: "Role Name"
        timestamp:
          type: string
          format: date-time
          example: "2023-03-15 13:51:21.000"
    paginated.permissions.response:
      type: object
      required:
        - items
        - totalNumberOfPages
        - totalNumberOfElements
        - pageSize
        - page
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/permissions.response"
        totalNumberOfPages:
          type: integer
          example: "4"
        totalNumberOfElements:
          type: integer
          example: "12"
        pageSize:
          type: integer
          example: "5"
        page:
          type: integer
          example: "1"
    paginated.user.role.requests.response:
      type: object
      required:
        - items
        - totalNumberOfPages
        - totalNumberOfElements
        - pageSize
        - page
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/user.roles.create-request.response"
        totalNumberOfPages:
          type: integer
          example: "4"
        totalNumberOfElements:
          type: integer
          example: "12"
        pageSize:
          type: integer
          example: "5"
        page:
          type: integer
          example: "1"
    paginated.user.roles.response:
      type: object
      required:
        - items
        - totalNumberOfPages
        - totalNumberOfElements
        - pageSize
        - page
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/user.roles.create.response"
        totalNumberOfPages:
          type: integer
          example: "4"
        totalNumberOfElements:
          type: integer
          example: "12"
        pageSize:
          type: integer
          example: "5"
        page:
          type: integer
          example: "1"
    paginated.roles.response:
      type: object
      required:
        - items
        - totalNumberOfPages
        - totalNumberOfElements
        - pageSize
        - page
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/roles.response"
        totalNumberOfPages:
          type: integer
          example: "4"
        totalNumberOfElements:
          type: integer
          example: "12"
        pageSize:
          type: integer
          example: "5"
        page:
          type: integer
          example: "1"
    paginated.audit.response:
      type: object
      required:
        - items
        - totalNumberOfPages
        - totalNumberOfElements
        - pageSize
        - page
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/audit.response"
        totalNumberOfPages:
          type: integer
          example: "4"
        totalNumberOfElements:
          type: integer
          example: "12"
        pageSize:
          type: integer
          example: "5"
        page:
          type: integer
          example: "1"
  responses:
    400:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error.response"
          example:
            error:
              code: "error-xxx"
              message: "Details about the fields that are causing the issues"
    404:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error.response"
          example:
            error:
              code: "error-xxx"
              message: "The requested resource does not exist"
    409:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error.response"
          example:
            error:
              code: "error-xxx"
              message: "The requested resource already exists"
    500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error.response"
          example:
            error:
              code: "error-xxx"
              message: "Details about why the server failed to process the request"